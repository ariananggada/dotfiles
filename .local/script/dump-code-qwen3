#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
from pathlib import Path
from datetime import datetime

# === KONFIGURASI USER ===
PROJECT_ROOT = "."  # Ganti dengan path proyek, misal: "../myproject" atau "C:\\project"
MAX_FILE_SIZE_MB = 50  # Skip file lebih besar dari ini (dalam MB)
INCLUDE_HIDDEN_FILES = True  # False jika ingin skip file/folder berawalan "." (kecuali .git, sudah di-ignore)

# === OTOMATIS: Nama folder & output file ===
root_path = Path(PROJECT_ROOT).resolve()
PROJECT_NAME = root_path.name
OUTPUT_FILE = f"dump_code-{PROJECT_NAME}.txt"

# === FILTER EKSTENSI & FOLDER ===
ALLOWED_EXTENSIONS = {
    # Python
    '.py', '.pyw', '.pyx', '.pxd', '.pyi', '.ipynb',
    # JavaScript / TypeScript
    '.js', '.jsx', '.ts', '.tsx', '.mjs', '.cjs',
    # Java
    '.java', '.jsp',
    # C/C++
    '.c', '.cpp', '.cc', '.cxx', '.h', '.hpp', '.hh', '.hxx',
    # C#
    '.cs',
    # Go
    '.go',
    # Rust
    '.rs',
    # Ruby
    '.rb', '.erb',
    # PHP
    '.php', '.phtml',
    # Swift
    '.swift',
    # Kotlin
    '.kt', '.kts',
    # Scala
    '.scala',
    # Shell
    '.sh', '.bash', '.zsh', '.fish',
    # Config/Markup
    '.json', '.yaml', '.yml', '.toml', '.ini', '.cfg', '.conf', '.env',
    # SQL
    '.sql',
    # HTML/XML
    '.html', '.htm', '.xml', '.xhtml',
    # Lainnya
    '.pl', '.pm', '.lua', '.r', '.dart', '.groovy', '.gradle',
    '.vue', '.svelte', '.astro', '.clj', '.cljs', '.edn',
    # Makefile, Dockerfile, dsb
    '.mk', '.makefile', 'makefile', 'dockerfile', 'Dockerfile',
    # Markdown
    '.md',
    # Terraform
    '.hcl', '.tf'
}

BLOCKED_EXTENSIONS = {
    # Arsip & kompresi
    '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2', '.xz', '.iso', '.tgz', '.jar', '.war',
    # Gambar & media
    '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.ico', '.svg', '.webp', '.mp3', '.mp4', '.wav',
    # Dokumentasi (kecuali jika kamu ubah)
    '.md', '.markdown', '.txt', '.rst', '.org',
    # Binary & executable
    '.exe', '.dll', '.so', '.dylib', '.bin', '.o', '.obj', '.class', '.pyc', '.pyo',
    # Database & data
    '.db', '.sqlite', '.mdb', '.csv', '.parquet', '.feather',
    # Lainnya
    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
    '.log', '.lock', '.map', '.min.js', '.min.css', '.woff', '.woff2', '.ttf',
}

IGNORED_DIRS = {
    '.git', '.svn', '.hg',
    'node_modules', 'bower_components',
    'venv', '.venv', 'env', '.env',
    '__pycache__', '.pytest_cache', '.mypy_cache',
    'dist', 'build', 'out', 'target', 'bin', 'obj',
    '.next', '.nuxt', 'public', 'static', 'assets',
    '.idea', '.vscode', '.vs', '.sublime-project', '.sublime-workspace',
    '.DS_Store', 'Thumbs.db',
    'logs', 'log', 'coverage', 'reports',
    'tmp', 'temp', 'cache',
}

# === FUNGSI PEMBANTU ===
def is_text_file(file_path):
    """Deteksi apakah file adalah teks (bukan binary)"""
    try:
        with open(file_path, 'rb') as f:
            chunk = f.read(1024)
            if b'\x00' in chunk:  # Null byte = kemungkinan binary
                return False
        # Coba baca sebagai teks
        with open(file_path, 'r', encoding='utf-8') as f:
            f.read(1024)
        return True
    except (UnicodeDecodeError, PermissionError, OSError):
        return False

def read_file_safely(file_path):
    """Baca file dengan fallback encoding"""
    encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']
    for enc in encodings:
        try:
            with open(file_path, 'r', encoding=enc) as f:
                return f.read(), enc
        except (UnicodeDecodeError, PermissionError, OSError):
            continue
    return None, None

# === FUNGSI UTAMA ===
def dump_project_code(root_dir, output_file):
    root = Path(root_dir).resolve()
    total_files = 0
    failed_files = 0
    total_bytes = 0
    start_time = datetime.now()

    with open(output_file, 'w', encoding='utf-8', newline='\n') as out:
        # === Tulis Header Informasi ===
        out.write(f"# DUMP KODE PROYEK: {PROJECT_NAME}\n")
        out.write(f"# Path: {root}\n")
        out.write(f"# Timestamp: {start_time.isoformat()}\n")
        out.write(f"# Generated by: dump_code_project.py (Ultimate Version)\n")
        out.write("=" * 60 + "\n\n")

        for file_path in root.rglob("*"):
            if not file_path.is_file():
                continue

            # Skip jika bagian dari ignored dirs
            try:
                rel_parts = file_path.relative_to(root).parts
            except ValueError:
                rel_parts = file_path.parts

            if any(part in IGNORED_DIRS for part in rel_parts):
                continue

            # Skip hidden files jika diatur
            if not INCLUDE_HIDDEN_FILES:
                if any(part.startswith('.') and part not in {'.', '..'} for part in rel_parts):
                    continue

            # Cek ukuran
            try:
                file_size = file_path.stat().st_size
                if file_size > MAX_FILE_SIZE_MB * 1024 * 1024:
                    print(f"‚è© Skip (terlalu besar): {file_path.relative_to(root)} ({file_size} bytes)")
                    continue
            except OSError:
                continue

            ext = file_path.suffix.lower()
            if ext in BLOCKED_EXTENSIONS:
                continue
            # if ext not in ALLOWED_EXTENSIONS and ext != '':
            #     continue

            if not is_text_file(file_path):
                continue

            # Dapatkan path relatif
            try:
                rel_path = file_path.relative_to(root)
            except ValueError:
                rel_path = file_path

            # Baca isi file
            content, used_encoding = read_file_safely(file_path)
            if content is None:
                print(f"‚ö†Ô∏è Gagal baca (encoding): {rel_path}")
                failed_files += 1
                continue

            # Tulis ke output
            separator = "=" * 40
            out.write(f"\n{separator}\n")
            out.write(f"=== {rel_path} ===\n")
            if used_encoding != 'utf-8':
                out.write(f"# Encoding: {used_encoding}\n")
            out.write(f"{separator}\n")
            out.write(content)
            if not content.endswith('\n'):
                out.write('\n')  # Pastikan akhir file ada newline
            out.write(f"{separator}\n")

            total_files += 1
            total_bytes += len(content.encode('utf-8'))
            print(f"‚úÖ Dumped: {rel_path} ({len(content)} chars, {used_encoding})")

    # === Tulis Footer Statistik ===
    end_time = datetime.now()
    duration = end_time - start_time
    with open(output_file, 'a', encoding='utf-8', newline='\n') as out:
        out.write(f"\n\n" + "="*60 + "\n")
        out.write(f"# STATISTIK DUMP\n")
        out.write(f"# Total file: {total_files}\n")
        out.write(f"# File gagal: {failed_files}\n")
        out.write(f"# Total ukuran: {total_bytes} bytes ({total_bytes / 1024 / 1024:.2f} MB)\n")
        out.write(f"# Waktu proses: {duration}\n")
        out.write(f"# Selesai: {end_time.isoformat()}\n")

    print(f"\nüéâ Selesai!")
    print(f"üìÅ Proyek: {PROJECT_NAME}")
    print(f"üìÑ Output: {OUTPUT_FILE}")
    print(f"üßÆ Total file: {total_files} | Gagal: {failed_files}")
    print(f"‚è±Ô∏è  Waktu: {duration}")
    print(f"üíæ Ukuran total: {total_bytes / 1024 / 1024:.2f} MB")

    if total_files == 0:
        print("\n‚ö†Ô∏è PERINGATAN: Tidak ada file yang di-dump. Periksa konfigurasi atau struktur folder.")

# === JALANKAN ===
if __name__ == "__main__":
    print(f"üöÄ Memulai dump kode proyek: {PROJECT_ROOT} ‚Üí {OUTPUT_FILE}")
    print(f"üìÅ Nama proyek: {PROJECT_NAME}")
    print(f"üìè Max ukuran file: {MAX_FILE_SIZE_MB} MB")
    print(f"üëÅÔ∏è  Include hidden files: {INCLUDE_HIDDEN_FILES}")
    print("-" * 60)
    dump_project_code(PROJECT_ROOT, OUTPUT_FILE)
