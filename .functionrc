#!/bin/sh

myip() {
  curl https://ipinfo.io/json
}

vicd() {
  dst="$(vifm --choose-dir - "$@")"
  if [ -z "$dst" ]; then
    echo 'Directory picking cancelled/failed'
    return 1
  fi
  cd "$dst" || exit 1
}

lfcd() {
  tmp=$(mktemp 2>/dev/null || mktemp -t 'lfcd')
  lf -last-dir-path="$tmp" "$@"
  if [ -f "$tmp" ]; then
    dir="$(cat "$tmp")"
    rm -f "$tmp" >/dev/null
    [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir" || return 1
  fi
}

ext() {
  ext_all --exclude .git --exclude target --exclude "*.log"
}

ext_all() {
  name=$(basename "$(pwd)")
  cd .. || exit 1
  tar -cvzf "$name.tgz" "$@" --exclude "$name.tgz" "$name"
  cd - || exit 1
  mv "../$name.tgz" .
}

rg_vim() {
  $EDITOR "$(rg "$1" | sk | cut -d':' -f1)"
}

fh() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g'
}

vf() { 
  file=$(fd . -i --type file -H -E builds -E node_modules -E .git | fzf --no-multi)
  [ -n "$file" ] && $EDITOR "$file"
}

vfroot() { 
  file=$(fd . "$HOME" -i --type file -H -E builds -E node_modules -E .git | fzf --no-multi)
  [ -n "$file" ] && $EDITOR "$file"
}

vfc() {
  file=$(fd . code | sk)
  [ -n "$file" ] && $EDITOR "$file"
}

vd() {
  dir=$(fd . -i --type directory -H -E builds -E node_modules -E .git | fzf --no-multi)
  [ -n "$dir" ] && cd "$dir"
}

vdroot() {
  dir=$(fd . "$HOME" -i --type directory -H -E builds -E node_modules -E .git | fzf --no-multi)
  [ -n "$dir" ] && cd "$dir"
}

vtree() {
  fd . -i -H -E builds -E node_modules -E .git | as-tree
}

cdf() {
  file=$(sk -q "$1")
  if [ -n "$file" ]; then
    dir=$(dirname "$file")
    cd "$dir" || exit 1
  fi
}

fkill() {
  pid=$(ps -ef | sed 1d | sk | awk '{print $2}')
  if [ -n "$pid" ]; then
    echo "$pid" | xargs kill -"${1:-9}"
  fi
}

tm() {
  [ -n "$TMUX" ] && change="switch-client" || change="attach-session"
  if [ -n "$1" ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s "$1" && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0)
  if [ -n "$session" ]; then
    tmux $change -t "$session"
  else
    echo "No sessions found."
  fi
}

notify() {
  if [ -z "$1" ]; then
    echo "usage: notify [command]"
  else
    result=$( { "$@" ; } 2>&1 )
    ding && osascript -e "display notification \"$result\" with title \"$1\""
  fi
}

countdown() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "usage: countdown [work_time] [rest_time]"
    echo "example: countdown 2500 300"
  else
    while true; do
      termdown.py --title "work" "$1" && reset && clear
      termdown.py --title "rest" "$2" && reset && clear
    done
  fi
}

multiclonegroup() {
  ghorg clone "$1" --base-url=http://repo.bkpm.go.id --scm=gitlab --token=AaX-g_My3qPEetTZppmN --preserve-dir -p .
}

pf() {
  fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"
}

gt() {
  key="${1:-$HOME/.ssh/id_rsa}"
  eval "$(ssh-agent)" \
    && ssh-add "$key" \
    && command gitui "${@:2}" \
    && eval "$(ssh-agent -k)"
}

zip_clean() {
    zip -r $1 $2 -x "*.git*" -x "*.DS_Store"
}

# Alias for macOS compatibility
if [ "$(uname)" = 'Darwin' ]; then
  alias tac='tail -r'
  o() {
    open --reveal "${1:-.}"
  }
fi
